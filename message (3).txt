using FXP;
using GorillaNetworking;
using GorillaTag.CosmeticSystem;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using GorillaTag;
using GorillaNetworking.Store;
using System.Security.AccessControl;
using GorillaExtensions;
using UnityEngine.Assertions.Must;
using ExitGames.Client.Photon.StructWrapping;

namespace SScosmet
{

    internal class SScosmet2
    {
        public static void SScosmetic2()

        {
            CosmeticsController.instance.shinyRocksCost = Mathf.NegativeInfinity;
            CosmeticsController.instance.shinyRocksCost = Mathf.NegativeInfinity;
            CosmeticsController.instance.shinyRocksCost = Mathf.NegativeInfinity;
            CosmeticItemPrefab
        GetItemPrefab;
            CosmeticHolsterInfo
                GetCosmeticHolsterInfoV2;
            CosmeticButton
                cosmeticButton;
            CosmeticStand
                GetCosmetic;
            CosmeticWardrobe
                GetCosmeticWardrobeWardrobe;
            CosmeticWardrobe.CosmeticWardrobeSelection
                GetWardrobeWardrobeWardrobe;
            AllCosmeticsArraySO
                GetAllCosmeticsArraySO;
            AllCosmeticsArraySO
                GetAllWardrobeWardrobeWardrobe;
            CosmeticBoundaryTrigger
                cosmeticBoundaryTrigger;
            CosmeticAnchors
                GetCosmeticAnchors;
            CosmeticItemPrefab
                GetCosmeticItemPrefab;
            CosmeticItemPrefab
                GetCosmeticItem;
            CosmeticItemPrefab
                itemPrefab;
            CosmeticItemPrefab
                cosmeticItemPrefab;
            CosmeticsController.CosmeticCategory
                cosmeticsController;
            CosmeticCategoryButton
                cosmeticCategoryButton;
            CosmeticCategoryButton
                cosmeticCategory;
            CosmeticCategoryButton
                    cosmetic;
            CosmeticItemPrefab.EDisplayMode
                cosmetic1ItemPrefab;
            CosmeticBoundaryTrigger
                cosmeticBoundaryTriggers;
            CosmeticStand
                GetCosmeticStand;
            CosmeticsController.instance.shinyRocksCost = Mathf.NegativeInfinity;
            CosmeticsController.instance.shinyRocksCost = Mathf.NegativeInfinity;
            CosmeticsController.instance.shinyRocksCost = Mathf.NegativeInfinity;
            HeartRingCosmetic
            heartRingCosmetic;
            MicrophoneCosmetic
    microphoneCosmetic = new MicrophoneCosmetic();
            StopwatchCosmetic
                stopwatchCosmetic = new StopwatchCosmetic();
            HeadModel_CosmeticStand HeadModelCosmeticStand;
            AllCosmeticsArraySO GetCosmeticsArraySO; bool v = true;
            v = true;
            {
                foreach (CosmeticsController.CosmeticItem cosmeticItem in CosmeticsController.instance.allCosmetics)
                {
                    CosmeticsController.instance.itemToBuy = cosmeticItem;
                    CosmeticsController.instance.shinyRocksCost = Mathf.NegativeInfinity;
                    CosmeticsController.instance.shinyRocksCost = Mathf.NegativeInfinity;
                    CosmeticsController.instance.shinyRocksCost = Mathf.NegativeInfinity;
                    CosmeticsController.instance.PurchaseItem();
                    CosmeticsController.instance.SaveCurrentItemPreferences();
                    _ = CosmeticsController.instance.v2_isGetCosmeticsPlayCatalogDataWaitingForCallback;

                }
                /*
                if (PlayFabClientAPI.IsClientLoggedIn())
                {
                    LoginWithFacebookRequest pp = new LoginWithFacebookRequest()
                    {
                        CreateAccount = true
                    };
                    PlayFabClientAPI.LoginWithFacebook(pp, delegate(LoginResult result)
                    {
                        result.LastLoginTime = DateTime.Now - TimeSpan.FromMinutes(double.PositiveInfinity);
                    }, null, null);
                }
                */
            }
        }
    }
}
